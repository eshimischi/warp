name: Build Pipeline

on:
  push:
  pull_request:
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: spaceonfire/spaceonfire-php-test25
  XDEBUG_MODE: off

jobs:
  docker:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        php-version:
          - '7.2'
          - '7.3'
          - '7.4'
          - '8.0'
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Log in to the Container registry
        uses: docker/login-action@v1
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v3
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: type=raw,value=${{ matrix.php-version }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v2
        with:
          context: .
          file: .docker/Dockerfile
          build-args: PHP_VERSION=${{ matrix.php-version }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          pull: true
          push: true
          cache-from: type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ matrix.php-version }}
          cache-to: type=inline

  composer:
    needs: [ docker ]
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/spaceonfire/spaceonfire-php-test25:8.0
      options: --user 1001
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Validate composer.json
        # todo: add single command to dev-tool
        run: |
          composer validate
          composer validate pkg/collection/composer.json
          composer validate pkg/command-bus/composer.json
          composer validate pkg/common/composer.json
          composer validate pkg/container/composer.json
          composer validate pkg/criteria/composer.json
          composer validate pkg/data-source/composer.json
          composer validate pkg/easy-coding-standard-bridge/composer.json
          composer validate pkg/laminas-hydrator-bridge/composer.json
          composer validate pkg/monolog-bridge/composer.json
          composer validate pkg/type/composer.json
          composer validate pkg/value-object/composer.json

      - name: Cache Composer packages
        id: composer-cache
        uses: actions/cache@v2
        env:
          COMPOSER_CACHE_KEY: 'composer-8.0-prefer-stable'
        with:
          path: vendor
          key: ${{ env.COMPOSER_CACHE_KEY }}-${{ hashFiles('composer.json') }}
          restore-keys: ${{ env.COMPOSER_CACHE_KEY }}

      - name: Install dependencies
        run: composer update --prefer-stable --prefer-dist --no-progress --no-interaction --no-progress

      - name: Validate monorepo
        run: vendor/bin/monorepo-builder validate --ansi

  codestyle:
    needs: [ docker ]
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/spaceonfire/spaceonfire-php-test25:8.0
      options: --user 1001
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Cache Composer packages
        id: composer-cache
        uses: actions/cache@v2
        env:
          COMPOSER_CACHE_KEY: 'composer-8.0-prefer-stable'
        with:
          path: vendor
          key: ${{ env.COMPOSER_CACHE_KEY }}-${{ hashFiles('composer.json') }}
          restore-keys: ${{ env.COMPOSER_CACHE_KEY }}

      - name: Install dependencies
        run: composer update --prefer-stable --prefer-dist --no-progress --no-interaction --no-progress

      - name: Check coding standard
        run: vendor/bin/ecs check --no-progress-bar --no-interaction

  lint:
    needs: [ docker ]
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/spaceonfire/spaceonfire-php-test25:8.0
      options: --user 1001
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Cache Composer packages
        id: composer-cache
        uses: actions/cache@v2
        env:
          COMPOSER_CACHE_KEY: 'composer-8.0-prefer-stable'
        with:
          path: vendor
          key: ${{ env.COMPOSER_CACHE_KEY }}-${{ hashFiles('composer.json') }}
          restore-keys: ${{ env.COMPOSER_CACHE_KEY }}

      - name: Install dependencies
        run: composer update --prefer-stable --prefer-dist --no-progress --no-interaction --no-progress

      - name: PHPStan
        run: vendor/bin/phpstan analyse --memory-limit=512M --no-progress --no-interaction

  phpunit:
    needs: [ docker ]
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        php-version:
          - '7.2'
          - '7.3'
          - '7.4'
          - '8.0'
        stability:
          - 'prefer-lowest'
          - 'prefer-stable'
    container:
      image: ghcr.io/spaceonfire/spaceonfire-php-test25:${{ matrix.php-version }}
      options: --user 1001
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Cache Composer packages
        id: composer-cache
        uses: actions/cache@v2
        env:
          COMPOSER_CACHE_KEY: 'composer-${{ matrix.php-version }}-${{ matrix.stability }}'
        with:
          path: vendor
          key: ${{ env.COMPOSER_CACHE_KEY }}-${{ hashFiles('composer.json') }}
          restore-keys: ${{ env.COMPOSER_CACHE_KEY }}

      - name: Install dependencies
        run: composer update --${{ matrix.stability }} --prefer-dist --no-progress --no-interaction --no-progress

      - name: PHPUnit
        run: vendor/bin/phpunit --no-interaction

#      - name: PHPUnit Artifacts
#        uses: actions/upload-artifact@v2
#        with:
#          name: phpunit-${{ matrix.php-version }}
#          path: build/phpunit/

#      - name: Generate coverage badge
#        if: matrix.php-version == '8.0' && matrix.stability == 'prefer-stable' && github.event_name == 'push' && github.ref == 'refs/heads/master'
#        run: php bin/coverage-badges.php build/phpunit/clover.xml ${{ secrets.COVERAGE_GIST_ID }} ${{ secrets.COVERAGE_GIST_TOKEN }}
